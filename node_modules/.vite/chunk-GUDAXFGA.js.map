{
  "version": 3,
  "sources": ["../../.yarn/cache/lit-html-npm-2.0.0-rc.3-bb75de0211-828168d0b2.zip/node_modules/lit-html/development/directive.js", "../../.yarn/cache/lit-html-npm-2.0.0-rc.3-bb75de0211-828168d0b2.zip/node_modules/lit-html/development/directives/style-map.js"],
  "sourcesContent": ["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport const PartType = {\n    ATTRIBUTE: 1,\n    CHILD: 2,\n    PROPERTY: 3,\n    BOOLEAN_ATTRIBUTE: 4,\n    EVENT: 5,\n    ELEMENT: 6,\n};\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive = (c) => (...values) => ({\n    _$litDirective$: c,\n    values,\n});\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport class Directive {\n    constructor(_partInfo) { }\n    /** @internal */\n    _$initialize(part, parent, attributeIndex) {\n        this.__part = part;\n        this._$parent = parent;\n        this.__attributeIndex = attributeIndex;\n    }\n    /** @internal */\n    _$resolve(part, props) {\n        return this.update(part, props);\n    }\n    update(_part, props) {\n        return this.render(...props);\n    }\n}\n//# sourceMappingURL=directive.js.map", "/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType, } from '../directive.js';\nclass StyleMapDirective extends Directive {\n    constructor(partInfo) {\n        var _a;\n        super(partInfo);\n        if (partInfo.type !== PartType.ATTRIBUTE ||\n            partInfo.name !== 'style' ||\n            ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n            throw new Error('The `styleMap` directive must be used in the `style` attribute ' +\n                'and must be the only part in the attribute.');\n        }\n    }\n    render(styleInfo) {\n        return Object.keys(styleInfo).reduce((style, prop) => {\n            const value = styleInfo[prop];\n            if (value == null) {\n                return style;\n            }\n            // Convert property names from camel-case to dash-case, i.e.:\n            //  `backgroundColor` -> `background-color`\n            // Vendor-prefixed names need an extra `-` appended to front:\n            //  `webkitAppearance` -> `-webkit-appearance`\n            // Exception is any property name containing a dash, including\n            // custom properties; we assume these are already dash-cased i.e.:\n            //  `--my-button-color` --> `--my-button-color`\n            prop = prop\n                .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n                .toLowerCase();\n            return style + `${prop}:${value};`;\n        }, '');\n    }\n    update(part, [styleInfo]) {\n        const { style } = part.element;\n        if (this._previousStyleProperties === undefined) {\n            this._previousStyleProperties = new Set();\n            for (const name in styleInfo) {\n                this._previousStyleProperties.add(name);\n            }\n            return this.render(styleInfo);\n        }\n        // Remove old properties that no longer exist in styleInfo\n        // We use forEach() instead of for-of so that re don't require down-level\n        // iteration.\n        this._previousStyleProperties.forEach((name) => {\n            // If the name isn't in styleInfo or it's null/undefined\n            if (styleInfo[name] == null) {\n                this._previousStyleProperties.delete(name);\n                if (name.includes('-')) {\n                    style.removeProperty(name);\n                }\n                else {\n                    // Note reset using empty string (vs null) as IE11 does not always\n                    // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    style[name] = '';\n                }\n            }\n        });\n        // Add or update properties\n        for (const name in styleInfo) {\n            const value = styleInfo[name];\n            if (value != null) {\n                this._previousStyleProperties.add(name);\n                if (name.includes('-')) {\n                    style.setProperty(name, value);\n                }\n                else {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    style[name] = value;\n                }\n            }\n        }\n        return noChange;\n    }\n}\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n */\nexport const styleMap = directive(StyleMapDirective);\n//# sourceMappingURL=style-map.js.map"],
  "mappings": ";;;;;AAAA,AAKO,IAAM,WAAW;AAAA,EACpB,WAAW;AAAA,EACX,OAAO;AAAA,EACP,UAAU;AAAA,EACV,mBAAmB;AAAA,EACnB,OAAO;AAAA,EACP,SAAS;AAAA;AAMN,IAAM,YAAY,CAAC,MAAM,IAAI,WAAY;AAAA,EAC5C,iBAAiB;AAAA,EACjB;AAAA;AAOG,sBAAgB;AAAA,EACnB,YAAY,WAAW;AAAA;AAAA,EAEvB,aAAa,MAAM,QAAQ,gBAAgB;AACvC,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,mBAAmB;AAAA;AAAA,EAG5B,UAAU,MAAM,OAAO;AACnB,WAAO,KAAK,OAAO,MAAM;AAAA;AAAA,EAE7B,OAAO,OAAO,OAAO;AACjB,WAAO,KAAK,OAAO,GAAG;AAAA;AAAA;;;ACvC9B,AAOA,sCAAgC,UAAU;AAAA,EACtC,YAAY,UAAU;AAClB,QAAI;AACJ,UAAM;AACN,QAAI,SAAS,SAAS,SAAS,aAC3B,SAAS,SAAS,WAChB,OAAK,SAAS,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,GAAG;AAC9E,YAAM,IAAI,MAAM;AAAA;AAAA;AAAA,EAIxB,OAAO,WAAW;AACd,WAAO,OAAO,KAAK,WAAW,OAAO,CAAC,OAAO,SAAS;AAClD,YAAM,QAAQ,UAAU;AACxB,UAAI,SAAS,MAAM;AACf,eAAO;AAAA;AASX,aAAO,KACF,QAAQ,qCAAqC,OAC7C;AACL,aAAO,QAAQ,GAAG,QAAQ;AAAA,OAC3B;AAAA;AAAA,EAEP,OAAO,MAAM,CAAC,YAAY;AACtB,UAAM,EAAE,UAAU,KAAK;AACvB,QAAI,KAAK,6BAA6B,QAAW;AAC7C,WAAK,2BAA2B,IAAI;AACpC,iBAAW,QAAQ,WAAW;AAC1B,aAAK,yBAAyB,IAAI;AAAA;AAEtC,aAAO,KAAK,OAAO;AAAA;AAKvB,SAAK,yBAAyB,QAAQ,CAAC,SAAS;AAE5C,UAAI,UAAU,SAAS,MAAM;AACzB,aAAK,yBAAyB,OAAO;AACrC,YAAI,KAAK,SAAS,MAAM;AACpB,gBAAM,eAAe;AAAA,eAEpB;AAID,gBAAM,QAAQ;AAAA;AAAA;AAAA;AAK1B,eAAW,QAAQ,WAAW;AAC1B,YAAM,QAAQ,UAAU;AACxB,UAAI,SAAS,MAAM;AACf,aAAK,yBAAyB,IAAI;AAClC,YAAI,KAAK,SAAS,MAAM;AACpB,gBAAM,YAAY,MAAM;AAAA,eAEvB;AAED,gBAAM,QAAQ;AAAA;AAAA;AAAA;AAI1B,WAAO;AAAA;AAAA;AAoBR,IAAM,WAAW,UAAU;",
  "names": []
}
